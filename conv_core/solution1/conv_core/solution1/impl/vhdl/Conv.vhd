-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Conv is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of Conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Conv_Conv,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=3872,HLS_SYN_LUT=4726,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (58 downto 0) := "00000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (58 downto 0) := "00000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (58 downto 0) := "00000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (58 downto 0) := "00000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (58 downto 0) := "00000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (58 downto 0) := "00000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (58 downto 0) := "00000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (58 downto 0) := "00001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (58 downto 0) := "00010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (58 downto 0) := "00100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (58 downto 0) := "01000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (58 downto 0) := "10000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv48_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (58 downto 0) := "00000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal CHin : STD_LOGIC_VECTOR (15 downto 0);
    signal Hin : STD_LOGIC_VECTOR (15 downto 0);
    signal Win : STD_LOGIC_VECTOR (15 downto 0);
    signal CHout : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx : STD_LOGIC_VECTOR (7 downto 0);
    signal Sy : STD_LOGIC_VECTOR (7 downto 0);
    signal mode : STD_LOGIC_VECTOR (0 downto 0);
    signal relu_en : STD_LOGIC_VECTOR (0 downto 0);
    signal feature_in : STD_LOGIC_VECTOR (63 downto 0);
    signal W : STD_LOGIC_VECTOR (63 downto 0);
    signal bias : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_out : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal feature_out_read_reg_1442 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_read_reg_1447 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_read_reg_1453 : STD_LOGIC_VECTOR (63 downto 0);
    signal feature_in_read_reg_1458 : STD_LOGIC_VECTOR (63 downto 0);
    signal relu_en_read_reg_1463 : STD_LOGIC_VECTOR (0 downto 0);
    signal Sy_read_reg_1468 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sx_read_reg_1473 : STD_LOGIC_VECTOR (7 downto 0);
    signal Ky_read_reg_1478 : STD_LOGIC_VECTOR (7 downto 0);
    signal Kx_read_reg_1483 : STD_LOGIC_VECTOR (7 downto 0);
    signal CHout_read_reg_1489 : STD_LOGIC_VECTOR (15 downto 0);
    signal Win_read_reg_1496 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHin_read_reg_1501 : STD_LOGIC_VECTOR (15 downto 0);
    signal pad_x_V_1_fu_528_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_1_reg_1515 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_1_fu_536_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_1_reg_1520 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1543_3_fu_556_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1543_3_reg_1525 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1543_8_fu_602_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1543_8_reg_1540 : STD_LOGIC_VECTOR (16 downto 0);
    signal Wout_V_fu_665_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal Wout_V_reg_1556 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal Wout_V_cast_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Wout_V_cast_reg_1562 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_8_fu_689_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_8_reg_1574 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal conv_i9_i381_fu_692_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i9_i381_reg_1580 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1525_fu_695_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1525_reg_1585 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1525_1_fu_698_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1525_1_reg_1590 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i282_fu_701_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_i_i282_reg_1595 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_2_fu_704_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_2_reg_1602 : STD_LOGIC_VECTOR (47 downto 0);
    signal Kx_cast7_fu_707_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Kx_cast7_reg_1607 : STD_LOGIC_VECTOR (15 downto 0);
    signal CHout_cast_fu_710_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal CHout_cast_reg_1612 : STD_LOGIC_VECTOR (47 downto 0);
    signal CHin_cast10_fu_713_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal CHin_cast10_reg_1619 : STD_LOGIC_VECTOR (23 downto 0);
    signal CHout_cast6_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal CHout_cast6_reg_1624 : STD_LOGIC_VECTOR (31 downto 0);
    signal cmp_i_i2831078_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp_i_i2831078_reg_1629 : STD_LOGIC_VECTOR (0 downto 0);
    signal bound_fu_727_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_reg_1633 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1339_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound10_reg_1638 : STD_LOGIC_VECTOR (31 downto 0);
    signal bound19_fu_736_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound19_reg_1643 : STD_LOGIC_VECTOR (47 downto 0);
    signal icmp_ln1057_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_reg_1648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal add_ln573_fu_799_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln573_reg_1664 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal add_ln1057_1_fu_810_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln1057_1_reg_1672 : STD_LOGIC_VECTOR (47 downto 0);
    signal icmp_ln1057_2_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_2_reg_1677 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1057_1_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln43_fu_824_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln43_reg_1686 : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_addr_reg_1692 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1057_5_fu_880_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1057_5_reg_1698 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_fu_893_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln45_reg_1705 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_4_fu_907_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of i_4_fu_907_p2 : signal is "no";
    signal select_ln1057_6_fu_917_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1057_6_reg_1722 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1352_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1525_reg_1727 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal select_ln1057_1_fu_924_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1057_1_reg_1732 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal sub_ln45_fu_954_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln45_reg_1738 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln45_2_fu_973_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln45_2_reg_1744 : STD_LOGIC_VECTOR (47 downto 0);
    signal bitcast_ln1057_fu_980_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln1057_reg_1749 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1057_2_fu_1007_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1057_2_reg_1757 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal select_ln49_fu_1018_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln49_reg_1762 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1057_4_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_2_fu_1057_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln49_2_reg_1773 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln49_2_fu_1069_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln49_2_reg_1778 : STD_LOGIC_VECTOR (15 downto 0);
    signal w_V_fu_1091_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of w_V_fu_1091_p2 : signal is "no";
    signal w_V_reg_1783 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln56_1_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_1_reg_1788 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal mul_ln49_1_fu_1189_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_1388_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln49_3_reg_1812 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal add_ln225_2_fu_1205_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln225_2_reg_1817 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_reg_1827 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal tmp9_fu_1235_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp9_reg_1832 : STD_LOGIC_VECTOR (47 downto 0);
    signal jj_fu_1244_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_reg_1840 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_1845 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal gmem_addr_1_reg_1851 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln76_fu_1331_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln76_reg_1857 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal grp_Conv_Pipeline_Input_Channel_fu_384_ap_start : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_ap_done : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_ap_idle : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_ap_ready : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_sum_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_sum_2_out_ap_vld : STD_LOGIC;
    signal grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_ce : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_324 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ii_reg_335 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_1_reg_346 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_1_reg_357 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_3_reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Conv_Pipeline_Input_Channel_fu_384_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal sext_ln1057_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln76_fu_1275_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_1_fu_188 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_1140_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_192 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten13_fu_196 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln1057_7_fu_1151_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal cout_fu_200 : STD_LOGIC_VECTOR (15 downto 0);
    signal indvar_flatten52_fu_204 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_399_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_399_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1543_fu_412_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1543_fu_416_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1543_fu_430_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1543_1_fu_436_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_422_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1543_1_fu_446_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1543_2_fu_452_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1543_1_fu_470_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1543_1_fu_474_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1543_2_fu_488_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1543_4_fu_494_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_480_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1543_3_fu_504_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1543_5_fu_510_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_x_V_fu_462_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal pad_y_V_fu_520_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_544_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1543_2_fu_552_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1543_2_fu_560_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1543_4_fu_566_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1543_5_fu_570_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_584_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_584_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln1543_1_fu_590_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1543_7_fu_598_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln1543_3_fu_606_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln1543_9_fu_612_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln1543_10_fu_616_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_630_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_630_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln223_fu_661_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_630_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln223_1_fu_671_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal Hout_V_fu_675_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_727_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound_fu_727_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bound19_fu_736_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound19_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_cast_fu_750_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_764_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_cast18_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_776_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1346_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_fu_794_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_fu_794_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_fu_794_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1057_fu_760_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_mid_fu_830_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_cast18_mid1_fu_838_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_mid130_fu_842_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_mid1_fu_847_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_cast_fu_781_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln1057_2_fu_857_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal icmp_ln1057_3_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1057_fu_901_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1057_fu_901_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1358_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1057_1_fu_929_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_1363_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln1057_3_fu_936_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln45_1_fu_948_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_mid1_fu_962_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_i_mid1_fu_962_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_i_mid1_fu_962_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln1057_2_cast_fu_932_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln573_2_fu_967_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln1057_4_fu_942_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal ii_cast19_fu_984_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_fu_988_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_cast_fu_993_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1057_6_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln50_fu_1026_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_cast19_mid1_fu_1032_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal h_V_mid1_fu_1036_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln49_1_fu_1041_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln49_2_fu_1069_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln49_2_fu_1069_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal h_V_cast_mid1_fu_1049_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln56_1_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln225_fu_1087_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln56_fu_1100_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_1106_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln225_1_fu_1096_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln1057_5_fu_1120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_fu_1125_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_3_fu_1079_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1057_fu_1145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln49_1_fu_1189_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1393_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln2_fu_1194_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sext_ln225_3_fu_1201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1401_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln49_fu_1213_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1226_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 of tmp_fu_1226_p2 : signal is "no";
    signal tmp9_fu_1235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_1235_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1381_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal shl_ln1_fu_1249_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln76_1_fu_1256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln76_fu_1260_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_1265_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln73_fu_1285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_1288_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln73_fu_1298_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln73_1_fu_1308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_1302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_fu_1314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_1_fu_1320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln73_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1339_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1339_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1346_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1346_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1352_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1352_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1352_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_1358_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1369_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1381_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1381_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_fu_1388_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1388_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1393_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1401_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1401_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_399_ce : STD_LOGIC;
    signal grp_fu_404_ce : STD_LOGIC;
    signal grp_fu_584_ap_start : STD_LOGIC;
    signal grp_fu_584_ap_done : STD_LOGIC;
    signal grp_fu_630_ap_start : STD_LOGIC;
    signal grp_fu_630_ap_done : STD_LOGIC;
    signal grp_fu_1352_ce : STD_LOGIC;
    signal grp_fu_1358_ce : STD_LOGIC;
    signal grp_fu_1363_ce : STD_LOGIC;
    signal grp_fu_1369_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (58 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal bound19_fu_736_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound19_fu_736_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal bound_fu_727_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal bound_fu_727_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1339_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1339_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1346_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1369_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1381_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1388_p00 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1401_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_584_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_630_p10 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_i_fu_794_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_i_mid1_fu_962_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal mul_ln49_2_fu_1069_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp9_fu_1235_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Conv_Conv_Pipeline_Input_Channel IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sum_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        CHin : IN STD_LOGIC_VECTOR (15 downto 0);
        trunc_ln59_cast : IN STD_LOGIC_VECTOR (61 downto 0);
        CHout_cast6 : IN STD_LOGIC_VECTOR (15 downto 0);
        zext_ln1057_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        tmp9 : IN STD_LOGIC_VECTOR (47 downto 0);
        W : IN STD_LOGIC_VECTOR (63 downto 0);
        sum_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_2_out_ap_vld : OUT STD_LOGIC;
        grp_fu_399_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_399_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_399_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_399_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_399_p_ce : OUT STD_LOGIC );
    end component;


    component Conv_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Conv_sdiv_18ns_9ns_16_22_seq_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_8ns_8ns_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_16ns_32ns_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_32ns_16ns_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_32s_16ns_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_mul_16ns_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_mul_sub_16ns_8ns_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_16ns_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Conv_mul_mul_16s_16ns_32_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Conv_mac_muladd_16ns_16ns_48ns_48_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mac_muladd_16s_16ns_48s_48_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component Conv_mul_mul_8ns_16ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component Conv_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        CHin : OUT STD_LOGIC_VECTOR (15 downto 0);
        Hin : OUT STD_LOGIC_VECTOR (15 downto 0);
        Win : OUT STD_LOGIC_VECTOR (15 downto 0);
        CHout : OUT STD_LOGIC_VECTOR (15 downto 0);
        Kx : OUT STD_LOGIC_VECTOR (7 downto 0);
        Ky : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sx : OUT STD_LOGIC_VECTOR (7 downto 0);
        Sy : OUT STD_LOGIC_VECTOR (7 downto 0);
        mode : OUT STD_LOGIC_VECTOR (0 downto 0);
        relu_en : OUT STD_LOGIC_VECTOR (0 downto 0);
        feature_in : OUT STD_LOGIC_VECTOR (63 downto 0);
        W : OUT STD_LOGIC_VECTOR (63 downto 0);
        bias : OUT STD_LOGIC_VECTOR (63 downto 0);
        feature_out : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component Conv_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_Conv_Pipeline_Input_Channel_fu_384 : component Conv_Conv_Pipeline_Input_Channel
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Conv_Pipeline_Input_Channel_fu_384_ap_start,
        ap_done => grp_Conv_Pipeline_Input_Channel_fu_384_ap_done,
        ap_idle => grp_Conv_Pipeline_Input_Channel_fu_384_ap_idle,
        ap_ready => grp_Conv_Pipeline_Input_Channel_fu_384_ap_ready,
        m_axi_gmem_AWVALID => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        sum_1 => sum_1_reg_357,
        CHin => CHin_read_reg_1501,
        trunc_ln59_cast => trunc_ln4_reg_1827,
        CHout_cast6 => CHout_read_reg_1489,
        zext_ln1057_1 => select_ln1057_1_reg_1732,
        tmp9 => tmp9_reg_1832,
        W => W_read_reg_1453,
        sum_2_out => grp_Conv_Pipeline_Input_Channel_fu_384_sum_2_out,
        sum_2_out_ap_vld => grp_Conv_Pipeline_Input_Channel_fu_384_sum_2_out_ap_vld,
        grp_fu_399_p_din0 => grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_din0,
        grp_fu_399_p_din1 => grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_din1,
        grp_fu_399_p_opcode => grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_opcode,
        grp_fu_399_p_dout0 => grp_fu_399_p2,
        grp_fu_399_p_ce => grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_ce);

    control_s_axi_U : component Conv_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        CHin => CHin,
        Hin => Hin,
        Win => Win,
        CHout => CHout,
        Kx => Kx,
        Ky => Ky,
        Sx => Sx,
        Sy => Sy,
        mode => mode,
        relu_en => relu_en,
        feature_in => feature_in,
        W => W,
        bias => bias,
        feature_out => feature_out,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_m_axi_U : component Conv_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_addr_1_reg_1851,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => select_ln76_reg_1857,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    fadd_32ns_32ns_32_4_full_dsp_1_U14 : component Conv_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_399_p0,
        din1 => grp_fu_399_p1,
        ce => grp_fu_399_ce,
        dout => grp_fu_399_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U15 : component Conv_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => sum_reg_1845,
        din1 => ap_const_lv32_0,
        ce => grp_fu_404_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_404_p2);

    sdiv_18ns_9ns_16_22_seq_1_U16 : component Conv_sdiv_18ns_9ns_16_22_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_584_ap_start,
        done => grp_fu_584_ap_done,
        din0 => grp_fu_584_p0,
        din1 => grp_fu_584_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_584_p2);

    sdiv_18ns_9ns_16_22_seq_1_U17 : component Conv_sdiv_18ns_9ns_16_22_seq_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 9,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_630_ap_start,
        done => grp_fu_630_ap_done,
        din0 => grp_fu_630_p0,
        din1 => grp_fu_630_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_630_p2);

    mul_8ns_8ns_16_1_1_U18 : component Conv_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => bound_fu_727_p0,
        din1 => bound_fu_727_p1,
        dout => bound_fu_727_p2);

    mul_16ns_32ns_48_1_1_U19 : component Conv_mul_16ns_32ns_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        din0 => bound19_fu_736_p0,
        din1 => bound19_fu_736_p1,
        dout => bound19_fu_736_p2);

    mul_32ns_16ns_48_1_1_U20 : component Conv_mul_32ns_16ns_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => mul_i_fu_794_p0,
        din1 => mul_i_fu_794_p1,
        dout => mul_i_fu_794_p2);

    mul_32ns_16ns_48_1_1_U21 : component Conv_mul_32ns_16ns_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => mul_i_mid1_fu_962_p0,
        din1 => mul_i_mid1_fu_962_p1,
        dout => mul_i_mid1_fu_962_p2);

    mul_8ns_8ns_16_1_1_U22 : component Conv_mul_8ns_8ns_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => mul_ln49_2_fu_1069_p0,
        din1 => mul_ln49_2_fu_1069_p1,
        dout => mul_ln49_2_fu_1069_p2);

    mul_32s_16ns_48_1_1_U23 : component Conv_mul_32s_16ns_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => grp_fu_1375_p2,
        din1 => mul_ln49_1_fu_1189_p1,
        dout => mul_ln49_1_fu_1189_p2);

    mul_32ns_16ns_48_1_1_U24 : component Conv_mul_32ns_16ns_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 16,
        dout_WIDTH => 48)
    port map (
        din0 => tmp9_fu_1235_p0,
        din1 => tmp9_fu_1235_p1,
        dout => tmp9_fu_1235_p2);

    mul_mul_16ns_16ns_32_4_1_U25 : component Conv_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1339_p0,
        din1 => grp_fu_1339_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1339_p2);

    mul_mul_16ns_16ns_32_4_1_U26 : component Conv_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1346_p0,
        din1 => grp_fu_1346_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1346_p2);

    mac_mul_sub_16ns_8ns_8ns_16_4_1_U27 : component Conv_mac_mul_sub_16ns_8ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1352_p0,
        din1 => grp_fu_1352_p1,
        din2 => grp_fu_1352_p2,
        ce => grp_fu_1352_ce,
        dout => grp_fu_1352_p3);

    mul_mul_16ns_8ns_16_4_1_U28 : component Conv_mul_mul_16ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_fu_192,
        din1 => grp_fu_1358_p1,
        ce => grp_fu_1358_ce,
        dout => grp_fu_1358_p2);

    mul_mul_16ns_8ns_16_4_1_U29 : component Conv_mul_mul_16ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => i_4_fu_907_p2,
        din1 => grp_fu_1363_p1,
        ce => grp_fu_1363_ce,
        dout => grp_fu_1363_p2);

    mul_mul_16ns_16ns_32_4_1_U30 : component Conv_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1369_p0,
        din1 => grp_fu_1369_p1,
        ce => grp_fu_1369_ce,
        dout => grp_fu_1369_p2);

    mul_mul_16s_16ns_32_4_1_U31 : component Conv_mul_mul_16s_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => select_ln49_1_fu_1041_p3,
        din1 => grp_fu_1375_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1375_p2);

    mac_muladd_16ns_16ns_48ns_48_4_1_U32 : component Conv_mac_muladd_16ns_16ns_48ns_48_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1381_p0,
        din1 => grp_fu_1381_p1,
        din2 => select_ln45_2_reg_1744,
        ce => ap_const_logic_1,
        dout => grp_fu_1381_p3);

    mul_mul_16ns_16ns_32_4_1_U33 : component Conv_mul_mul_16ns_16ns_32_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1388_p0,
        din1 => grp_fu_1388_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1388_p2);

    mac_muladd_16s_16ns_48s_48_4_1_U34 : component Conv_mac_muladd_16s_16ns_48s_48_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => w_V_reg_1783,
        din1 => grp_fu_1393_p1,
        din2 => mul_ln49_1_fu_1189_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1393_p3);

    mul_mul_8ns_16ns_24_4_1_U35 : component Conv_mul_mul_8ns_16ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1401_p0,
        din1 => grp_fu_1401_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1401_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Conv_Pipeline_Input_Channel_fu_384_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Conv_Pipeline_Input_Channel_fu_384_ap_start_reg <= ap_const_logic_0;
            else
                if (((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then 
                    grp_Conv_Pipeline_Input_Channel_fu_384_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Conv_Pipeline_Input_Channel_fu_384_ap_ready = ap_const_logic_1)) then 
                    grp_Conv_Pipeline_Input_Channel_fu_384_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    cout_fu_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                cout_fu_200 <= ap_const_lv16_0;
            elsif (((icmp_ln1057_4_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                cout_fu_200 <= select_ln1057_1_reg_1732;
            end if; 
        end if;
    end process;

    i_fu_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_192 <= ap_const_lv16_0;
            elsif (((icmp_ln1057_4_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                i_fu_192 <= select_ln1057_6_reg_1722;
            end if; 
        end if;
    end process;

    ii_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                ii_reg_335 <= select_ln49_2_reg_1773;
            elsif (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                ii_reg_335 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_fu_196 <= ap_const_lv32_0;
            elsif (((icmp_ln1057_4_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                indvar_flatten13_fu_196 <= select_ln1057_7_fu_1151_p3;
            end if; 
        end if;
    end process;

    indvar_flatten52_fu_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten52_fu_204 <= ap_const_lv48_0;
            elsif (((icmp_ln1057_4_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                indvar_flatten52_fu_204 <= add_ln1057_1_reg_1672;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                indvar_flatten_reg_324 <= add_ln1057_2_reg_1757;
            elsif (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                indvar_flatten_reg_324 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    jj_1_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                jj_1_reg_346 <= jj_reg_1840;
            elsif (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                jj_1_reg_346 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    lhs_V_1_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                lhs_V_1_fu_188 <= ap_const_lv16_0;
            elsif (((icmp_ln1057_4_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then 
                lhs_V_1_fu_188 <= j_fu_1140_p2;
            end if; 
        end if;
    end process;

    sum_1_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                sum_1_reg_357 <= sum_3_reg_369;
            elsif (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                sum_1_reg_357 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_3_reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_0 = and_ln56_1_reg_1788) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
                sum_3_reg_369 <= sum_1_reg_357;
            elsif (((ap_const_lv1_1 = and_ln56_1_reg_1788) and (cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                sum_3_reg_369 <= grp_Conv_Pipeline_Input_Channel_fu_384_sum_2_out;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                    CHin_cast10_reg_1619(15 downto 0) <= CHin_cast10_fu_713_p1(15 downto 0);
                    CHout_cast6_reg_1624(15 downto 0) <= CHout_cast6_fu_716_p1(15 downto 0);
                    CHout_cast_reg_1612(15 downto 0) <= CHout_cast_fu_710_p1(15 downto 0);
                    Kx_cast7_reg_1607(7 downto 0) <= Kx_cast7_fu_707_p1(7 downto 0);
                bound10_reg_1638 <= grp_fu_1339_p2;
                bound19_reg_1643 <= bound19_fu_736_p2;
                bound_reg_1633 <= bound_fu_727_p2;
                cmp_i_i2831078_reg_1629 <= cmp_i_i2831078_fu_719_p2;
                    conv_i9_i381_reg_1580(7 downto 0) <= conv_i9_i381_fu_692_p1(7 downto 0);
                    conv_i_i282_reg_1595(15 downto 0) <= conv_i_i282_fu_701_p1(15 downto 0);
                icmp_ln1057_reg_1648 <= icmp_ln1057_fu_742_p2;
                    rhs_2_reg_1602(15 downto 0) <= rhs_2_fu_704_p1(15 downto 0);
                    rhs_8_reg_1574(7 downto 0) <= rhs_8_fu_689_p1(7 downto 0);
                    zext_ln1525_1_reg_1590(7 downto 0) <= zext_ln1525_1_fu_698_p1(7 downto 0);
                    zext_ln1525_reg_1585(7 downto 0) <= zext_ln1525_fu_695_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                CHin_read_reg_1501 <= CHin;
                CHout_read_reg_1489 <= CHout;
                Kx_read_reg_1483 <= Kx;
                Ky_read_reg_1478 <= Ky;
                Sx_read_reg_1473 <= Sx;
                Sy_read_reg_1468 <= Sy;
                W_read_reg_1453 <= W;
                Win_read_reg_1496 <= Win;
                bias_read_reg_1447 <= bias;
                feature_in_read_reg_1458 <= feature_in;
                feature_out_read_reg_1442 <= feature_out;
                pad_x_V_1_reg_1515 <= pad_x_V_1_fu_528_p3;
                pad_y_V_1_reg_1520 <= pad_y_V_1_fu_536_p3;
                relu_en_read_reg_1463 <= relu_en;
                    zext_ln1543_3_reg_1525(15 downto 0) <= zext_ln1543_3_fu_556_p1(15 downto 0);
                    zext_ln1543_8_reg_1540(15 downto 0) <= zext_ln1543_8_fu_602_p1(15 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                    Wout_V_cast_reg_1562(15 downto 0) <= Wout_V_cast_fu_681_p1(15 downto 0);
                Wout_V_reg_1556 <= Wout_V_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                add_ln1057_1_reg_1672 <= add_ln1057_1_fu_810_p2;
                add_ln573_reg_1664 <= add_ln573_fu_799_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                add_ln1057_2_reg_1757 <= add_ln1057_2_fu_1007_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                add_ln225_2_reg_1817 <= add_ln225_2_fu_1205_p2;
                mul_ln49_3_reg_1812 <= grp_fu_1388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_1_fu_805_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                add_ln43_reg_1686 <= add_ln43_fu_824_p2;
                gmem_addr_reg_1692 <= sext_ln1057_fu_865_p1;
                icmp_ln1057_2_reg_1677 <= icmp_ln1057_2_fu_819_p2;
                select_ln1057_5_reg_1698 <= select_ln1057_5_fu_880_p3;
                select_ln45_reg_1705 <= select_ln45_fu_893_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1057_4_fu_1002_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                and_ln56_1_reg_1788 <= and_ln56_1_fu_1131_p2;
                mul_ln49_2_reg_1778 <= mul_ln49_2_fu_1069_p2;
                select_ln49_2_reg_1773 <= select_ln49_2_fu_1057_p3;
                select_ln49_reg_1762 <= select_ln49_fu_1018_p3;
                w_V_reg_1783 <= w_V_fu_1091_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                bitcast_ln1057_reg_1749 <= bitcast_ln1057_fu_980_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                gmem_addr_1_reg_1851 <= sext_ln76_fu_1275_p1;
                sum_reg_1845 <= grp_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                jj_reg_1840 <= jj_fu_1244_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                select_ln1057_1_reg_1732 <= select_ln1057_1_fu_924_p3;
                select_ln45_2_reg_1744 <= select_ln45_2_fu_973_p3;
                sub_ln45_reg_1738 <= sub_ln45_fu_954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                select_ln1057_6_reg_1722 <= select_ln1057_6_fu_917_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                select_ln76_reg_1857 <= select_ln76_fu_1331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                sub_ln1525_reg_1727 <= grp_fu_1352_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                tmp9_reg_1832 <= tmp9_fu_1235_p2;
                trunc_ln4_reg_1827 <= add_ln225_2_reg_1817(63 downto 2);
            end if;
        end if;
    end process;
    zext_ln1543_3_reg_1525(16) <= '0';
    zext_ln1543_8_reg_1540(16) <= '0';
    Wout_V_cast_reg_1562(31 downto 16) <= "0000000000000000";
    rhs_8_reg_1574(15 downto 8) <= "00000000";
    conv_i9_i381_reg_1580(15 downto 8) <= "00000000";
    zext_ln1525_reg_1585(15 downto 8) <= "00000000";
    zext_ln1525_1_reg_1590(15 downto 8) <= "00000000";
    conv_i_i282_reg_1595(31 downto 16) <= "0000000000000000";
    rhs_2_reg_1602(47 downto 16) <= "00000000000000000000000000000000";
    Kx_cast7_reg_1607(15 downto 8) <= "00000000";
    CHout_cast_reg_1612(47 downto 16) <= "00000000000000000000000000000000";
    CHin_cast10_reg_1619(23 downto 16) <= "00000000";
    CHout_cast6_reg_1624(31 downto 16) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state52, ap_CS_fsm_state54, ap_CS_fsm_state59, ap_CS_fsm_state30, ap_CS_fsm_state37, cmp_i_i2831078_reg_1629, ap_CS_fsm_state29, icmp_ln1057_1_fu_805_p2, ap_CS_fsm_state38, icmp_ln1057_4_fu_1002_p2, and_ln56_1_reg_1788, ap_CS_fsm_state42, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_ap_done, gmem_AWREADY, gmem_WREADY, gmem_ARREADY, gmem_RVALID, gmem_BVALID, ap_CS_fsm_state46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((icmp_ln1057_1_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state30 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                if (((icmp_ln1057_4_fu_1002_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((ap_const_lv1_0 = and_ln56_1_reg_1788) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((cmp_i_i2831078_reg_1629 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state46 => 
                if (((grp_Conv_Pipeline_Input_Channel_fu_384_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state52;
                end if;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    CHin_cast10_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_read_reg_1501),24));
    CHout_cast6_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_read_reg_1489),32));
    CHout_cast_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_read_reg_1489),48));
    Hout_V_fu_675_p2 <= std_logic_vector(unsigned(trunc_ln223_1_fu_671_p1) + unsigned(ap_const_lv16_1));
    Kx_cast7_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_read_reg_1483),16));
    Wout_V_cast_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_V_fu_665_p2),32));
    Wout_V_fu_665_p2 <= std_logic_vector(unsigned(trunc_ln223_fu_661_p1) + unsigned(ap_const_lv16_1));
    add_ln1057_1_fu_810_p2 <= std_logic_vector(unsigned(indvar_flatten52_fu_204) + unsigned(ap_const_lv48_1));
    add_ln1057_2_fu_1007_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_324) + unsigned(ap_const_lv16_1));
    add_ln1057_fu_1145_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_196) + unsigned(ap_const_lv32_1));
    add_ln1543_1_fu_474_p2 <= std_logic_vector(unsigned(zext_ln1543_1_fu_470_p1) + unsigned(ap_const_lv9_1FF));
    add_ln1543_2_fu_560_p2 <= std_logic_vector(unsigned(zext_ln1543_2_fu_552_p1) + unsigned(zext_ln1543_3_fu_556_p1));
    add_ln1543_3_fu_606_p2 <= std_logic_vector(unsigned(zext_ln1543_7_fu_598_p1) + unsigned(zext_ln1543_8_fu_602_p1));
    add_ln1543_fu_416_p2 <= std_logic_vector(unsigned(zext_ln1543_fu_412_p1) + unsigned(ap_const_lv9_1FF));
    add_ln225_2_fu_1205_p2 <= std_logic_vector(signed(sext_ln225_3_fu_1201_p1) + signed(feature_in_read_reg_1458));
    add_ln43_fu_824_p2 <= std_logic_vector(unsigned(cout_fu_200) + unsigned(ap_const_lv16_1));
    add_ln50_fu_1026_p2 <= std_logic_vector(unsigned(ii_reg_335) + unsigned(ap_const_lv8_1));
    add_ln573_2_fu_967_p2 <= std_logic_vector(unsigned(mul_i_mid1_fu_962_p2) + unsigned(select_ln1057_2_cast_fu_932_p1));
    add_ln573_fu_799_p2 <= std_logic_vector(unsigned(mul_i_fu_794_p2) + unsigned(zext_ln1057_fu_760_p1));
    add_ln76_fu_1260_p2 <= std_logic_vector(unsigned(zext_ln76_1_fu_1256_p1) + unsigned(feature_out_read_reg_1442));
    and_ln56_1_fu_1131_p2 <= (select_ln49_3_fu_1079_p3 and and_ln56_fu_1125_p2);
    and_ln56_fu_1125_p2 <= (xor_ln56_fu_1114_p2 and icmp_ln1057_5_fu_1120_p2);
    and_ln73_1_fu_1320_p2 <= (or_ln73_fu_1314_p2 and grp_fu_404_p2);
    and_ln73_fu_1326_p2 <= (relu_en_read_reg_1463 and and_ln73_1_fu_1320_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state30_blk_assign_proc : process(gmem_ARREADY)
    begin
        if ((gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state30_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state30_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;

    ap_ST_fsm_state37_blk_assign_proc : process(gmem_RVALID)
    begin
        if ((gmem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state37_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state37_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(grp_Conv_Pipeline_Input_Channel_fu_384_ap_done)
    begin
        if ((grp_Conv_Pipeline_Input_Channel_fu_384_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;

    ap_ST_fsm_state52_blk_assign_proc : process(gmem_AWREADY)
    begin
        if ((gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state52_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state52_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state53_blk <= ap_const_logic_0;

    ap_ST_fsm_state54_blk_assign_proc : process(gmem_WREADY)
    begin
        if ((gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state54_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state54_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;

    ap_ST_fsm_state59_blk_assign_proc : process(gmem_BVALID)
    begin
        if ((gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state59_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state59_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state29, icmp_ln1057_1_fu_805_p2)
    begin
        if (((icmp_ln1057_1_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state29, icmp_ln1057_1_fu_805_p2)
    begin
        if (((icmp_ln1057_1_fu_805_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln1057_fu_980_p1 <= gmem_RDATA;
    bitcast_ln73_fu_1285_p1 <= sum_reg_1845;
    bound19_fu_736_p0 <= bound19_fu_736_p00(16 - 1 downto 0);
    bound19_fu_736_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHout_read_reg_1489),48));
    bound19_fu_736_p1 <= bound19_fu_736_p10(32 - 1 downto 0);
    bound19_fu_736_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1339_p2),48));
    bound_fu_727_p0 <= bound_fu_727_p00(8 - 1 downto 0);
    bound_fu_727_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky_read_reg_1478),16));
    bound_fu_727_p1 <= bound_fu_727_p10(8 - 1 downto 0);
    bound_fu_727_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx_read_reg_1483),16));
    cmp_i_i2831078_fu_719_p2 <= "1" when (CHin_read_reg_1501 = ap_const_lv16_0) else "0";
    conv_i9_i381_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pad_y_V_1_reg_1520),16));
    conv_i_i282_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(CHin_read_reg_1501),32));
    empty_fu_776_p2 <= std_logic_vector(unsigned(p_cast18_fu_772_p1) + unsigned(bias_read_reg_1447));

    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state30, cmp_i_i2831078_reg_1629, gmem_addr_reg_1692, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARADDR, gmem_ARREADY, ap_CS_fsm_state46)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            gmem_ARADDR <= gmem_addr_reg_1692;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARADDR <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARBURST, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARBURST <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARBURST;
        else 
            gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARCACHE, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARCACHE <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARCACHE;
        else 
            gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARID_assign_proc : process(cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARID, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARID <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARID;
        else 
            gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state30, cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARLEN, gmem_ARREADY, ap_CS_fsm_state46)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARLEN <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARLOCK, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARLOCK <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARLOCK;
        else 
            gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARPROT, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARPROT <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARPROT;
        else 
            gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARQOS, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARQOS <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARQOS;
        else 
            gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARREGION, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARREGION <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARREGION;
        else 
            gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARSIZE, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARSIZE <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARSIZE;
        else 
            gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARUSER, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARUSER <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARUSER;
        else 
            gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state30, cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARVALID, gmem_ARREADY, ap_CS_fsm_state46)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_ARVALID <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state52, gmem_AWREADY)
    begin
        if (((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
            gmem_AWVALID <= ap_const_logic_1;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state59, gmem_BVALID)
    begin
        if (((gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            gmem_BREADY <= ap_const_logic_1;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state37, cmp_i_i2831078_reg_1629, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_RREADY, gmem_RVALID, ap_CS_fsm_state46)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or ((cmp_i_i2831078_reg_1629 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state45)))) then 
            gmem_RREADY <= grp_Conv_Pipeline_Input_Channel_fu_384_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state54, gmem_WREADY)
    begin
        if (((gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state54))) then 
            gmem_WVALID <= ap_const_logic_1;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state59)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_Conv_Pipeline_Input_Channel_fu_384_ap_start <= grp_Conv_Pipeline_Input_Channel_fu_384_ap_start_reg;
    grp_fu_1339_p0 <= grp_fu_1339_p00(16 - 1 downto 0);
    grp_fu_1339_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hout_V_fu_675_p2),32));
    grp_fu_1339_p1 <= grp_fu_1339_p10(16 - 1 downto 0);
    grp_fu_1339_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Wout_V_fu_665_p2),32));
    grp_fu_1346_p0 <= grp_fu_1346_p00(16 - 1 downto 0);
    grp_fu_1346_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast_fu_750_p0),32));
    grp_fu_1346_p1 <= Wout_V_cast_reg_1562(16 - 1 downto 0);

    grp_fu_1352_ce_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state29, ap_CS_fsm_state32, gmem_ARREADY, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_1352_ce <= ap_const_logic_1;
        else 
            grp_fu_1352_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1352_p0 <= 
        ap_const_lv16_0 when (or_ln45_fu_887_p2(0) = '1') else 
        lhs_V_1_fu_188;
    grp_fu_1352_p1 <= zext_ln1525_reg_1585(8 - 1 downto 0);
    grp_fu_1352_p2 <= zext_ln1525_1_reg_1590(8 - 1 downto 0);

    grp_fu_1358_ce_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, gmem_ARREADY, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_1358_ce <= ap_const_logic_1;
        else 
            grp_fu_1358_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1358_p1 <= rhs_8_reg_1574(8 - 1 downto 0);

    grp_fu_1363_ce_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, gmem_ARREADY, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_1363_ce <= ap_const_logic_1;
        else 
            grp_fu_1363_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1363_p1 <= rhs_8_reg_1574(8 - 1 downto 0);

    grp_fu_1369_ce_assign_proc : process(ap_CS_fsm_state30, ap_CS_fsm_state32, ap_CS_fsm_state33, gmem_ARREADY, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state30)))) then 
            grp_fu_1369_ce <= ap_const_logic_1;
        else 
            grp_fu_1369_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1369_p0 <= grp_fu_1369_p00(16 - 1 downto 0);
    grp_fu_1369_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_fu_907_p2),32));
    grp_fu_1369_p1 <= Wout_V_cast_reg_1562(16 - 1 downto 0);
    grp_fu_1375_p1 <= conv_i_i282_reg_1595(16 - 1 downto 0);
    grp_fu_1381_p0 <= grp_fu_1381_p00(16 - 1 downto 0);
    grp_fu_1381_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_reg_1705),32));
    grp_fu_1381_p1 <= CHout_cast6_reg_1624(16 - 1 downto 0);
    grp_fu_1388_p0 <= grp_fu_1388_p00(16 - 1 downto 0);
    grp_fu_1388_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln49_2_reg_1778),32));
    grp_fu_1388_p1 <= conv_i_i282_reg_1595(16 - 1 downto 0);
    grp_fu_1393_p1 <= conv_i_i282_reg_1595(16 - 1 downto 0);
    grp_fu_1401_p0 <= grp_fu_1401_p00(8 - 1 downto 0);
    grp_fu_1401_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_reg_1762),24));
    grp_fu_1401_p1 <= CHin_cast10_reg_1619(16 - 1 downto 0);

    grp_fu_399_ce_assign_proc : process(ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_ce, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_399_ce <= grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_ce;
        else 
            grp_fu_399_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_399_p0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_din0, sum_1_reg_357, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_399_p0 <= grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_399_p0 <= sum_1_reg_357;
        else 
            grp_fu_399_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_399_p1_assign_proc : process(bitcast_ln1057_reg_1749, ap_CS_fsm_state38, ap_CS_fsm_state45, grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_din1, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45))) then 
            grp_fu_399_p1 <= grp_Conv_Pipeline_Input_Channel_fu_384_grp_fu_399_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_fu_399_p1 <= bitcast_ln1057_reg_1749;
        else 
            grp_fu_399_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_404_ce_assign_proc : process(ap_CS_fsm_state52, ap_CS_fsm_state53, gmem_AWREADY)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or ((gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state52)))) then 
            grp_fu_404_ce <= ap_const_logic_1;
        else 
            grp_fu_404_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_584_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_584_ap_start <= ap_const_logic_1;
        else 
            grp_fu_584_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_584_p0 <= std_logic_vector(unsigned(zext_ln1543_4_fu_566_p1) - unsigned(zext_ln1543_5_fu_570_p1));
    grp_fu_584_p1 <= grp_fu_584_p10(9 - 1 downto 0);
    grp_fu_584_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx),18));

    grp_fu_630_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_630_ap_start <= ap_const_logic_1;
        else 
            grp_fu_630_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_630_p0 <= std_logic_vector(unsigned(zext_ln1543_9_fu_612_p1) - unsigned(zext_ln1543_10_fu_616_p1));
    grp_fu_630_p1 <= grp_fu_630_p10(9 - 1 downto 0);
    grp_fu_630_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy),18));
        h_V_cast_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_V_fu_988_p2),17));

        h_V_cast_mid1_fu_1049_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(h_V_mid1_fu_1036_p2),17));

    h_V_fu_988_p2 <= std_logic_vector(unsigned(sub_ln45_reg_1738) + unsigned(ii_cast19_fu_984_p1));
    h_V_mid1_fu_1036_p2 <= std_logic_vector(unsigned(sub_ln45_reg_1738) + unsigned(ii_cast19_mid1_fu_1032_p1));
    i_4_fu_907_p2 <= std_logic_vector(unsigned(select_ln1057_fu_901_p3) + unsigned(ap_const_lv16_1));
    i_cast_fu_750_p0 <= i_fu_192;
    icmp_ln1057_1_fu_805_p2 <= "1" when (indvar_flatten52_fu_204 = bound19_reg_1643) else "0";
    icmp_ln1057_2_fu_819_p2 <= "1" when (indvar_flatten13_fu_196 = bound10_reg_1638) else "0";
    icmp_ln1057_3_fu_875_p2 <= "1" when (lhs_V_1_fu_188 = Wout_V_reg_1556) else "0";
    icmp_ln1057_4_fu_1002_p2 <= "1" when (indvar_flatten_reg_324 = bound_reg_1633) else "0";
    icmp_ln1057_5_fu_1120_p2 <= "1" when (signed(sext_ln225_1_fu_1096_p1) < signed(zext_ln1543_3_reg_1525)) else "0";
    icmp_ln1057_6_fu_1013_p2 <= "1" when (jj_1_reg_346 = Kx_read_reg_1483) else "0";
    icmp_ln1057_fu_742_p2 <= "1" when (Wout_V_reg_1556 = ap_const_lv16_0) else "0";
    icmp_ln56_1_fu_1074_p2 <= "1" when (signed(h_V_cast_mid1_fu_1049_p1) < signed(zext_ln1543_8_reg_1540)) else "0";
    icmp_ln56_fu_997_p2 <= "1" when (signed(h_V_cast_fu_993_p1) < signed(zext_ln1543_8_reg_1540)) else "0";
    icmp_ln73_1_fu_1308_p2 <= "1" when (trunc_ln73_fu_1298_p1 = ap_const_lv23_0) else "0";
    icmp_ln73_fu_1302_p2 <= "0" when (tmp_1_fu_1288_p4 = ap_const_lv8_FF) else "1";
    ii_cast19_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_335),16));
    ii_cast19_mid1_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln50_fu_1026_p2),16));
    j_fu_1140_p2 <= std_logic_vector(signed(select_ln45_reg_1705) + signed(ap_const_lv16_1));
    jj_fu_1244_p2 <= std_logic_vector(unsigned(select_ln49_reg_1762) + unsigned(ap_const_lv8_1));
    mul_i_fu_794_p0 <= mul_i_fu_794_p00(32 - 1 downto 0);
    mul_i_fu_794_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1346_p2),48));
    mul_i_fu_794_p1 <= CHout_cast_reg_1612(16 - 1 downto 0);
    mul_i_mid1_fu_962_p0 <= mul_i_mid1_fu_962_p00(32 - 1 downto 0);
    mul_i_mid1_fu_962_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1369_p2),48));
    mul_i_mid1_fu_962_p1 <= CHout_cast_reg_1612(16 - 1 downto 0);
    mul_ln49_1_fu_1189_p1 <= rhs_2_reg_1602(16 - 1 downto 0);
    mul_ln49_2_fu_1069_p0 <= mul_ln49_2_fu_1069_p00(8 - 1 downto 0);
    mul_ln49_2_fu_1069_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_2_fu_1057_p3),16));
    mul_ln49_2_fu_1069_p1 <= Kx_cast7_reg_1607(8 - 1 downto 0);
    or_ln45_fu_887_p2 <= (select_ln1057_5_fu_880_p3 or icmp_ln1057_2_fu_819_p2);
    or_ln56_fu_1100_p2 <= (w_V_fu_1091_p2 or select_ln49_1_fu_1041_p3);
    or_ln73_fu_1314_p2 <= (icmp_ln73_fu_1302_p2 or icmp_ln73_1_fu_1308_p2);
    p_cast18_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_764_p3),64));
    p_cast18_mid1_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid_fu_830_p3),64));
    p_cast_fu_781_p4 <= empty_fu_776_p2(63 downto 2);
    p_cast_mid1_fu_847_p4 <= p_mid130_fu_842_p2(63 downto 2);
    p_mid130_fu_842_p2 <= std_logic_vector(unsigned(p_cast18_mid1_fu_838_p1) + unsigned(bias_read_reg_1447));
    p_mid_fu_830_p3 <= (add_ln43_fu_824_p2 & ap_const_lv2_0);
    pad_x_V_1_fu_528_p3 <= 
        pad_x_V_fu_462_p3 when (mode(0) = '1') else 
        ap_const_lv8_0;
    pad_x_V_fu_462_p3 <= 
        sub_ln1543_1_fu_446_p2 when (tmp_4_fu_422_p3(0) = '1') else 
        trunc_ln1543_2_fu_452_p4;
    pad_y_V_1_fu_536_p3 <= 
        pad_y_V_fu_520_p3 when (mode(0) = '1') else 
        ap_const_lv8_0;
    pad_y_V_fu_520_p3 <= 
        sub_ln1543_3_fu_504_p2 when (tmp_5_fu_480_p3(0) = '1') else 
        trunc_ln1543_5_fu_510_p4;
    rhs_2_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win_read_reg_1496),48));
    rhs_8_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sy_read_reg_1468),16));
    select_ln1057_1_fu_924_p3 <= 
        add_ln43_reg_1686 when (icmp_ln1057_2_reg_1677(0) = '1') else 
        cout_fu_200;
    select_ln1057_2_cast_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln1057_1_fu_924_p3),48));
    select_ln1057_2_fu_857_p3 <= 
        p_cast_mid1_fu_847_p4 when (icmp_ln1057_2_fu_819_p2(0) = '1') else 
        p_cast_fu_781_p4;
    select_ln1057_3_fu_936_p3 <= 
        ap_const_lv16_0 when (icmp_ln1057_2_reg_1677(0) = '1') else 
        grp_fu_1358_p2;
    select_ln1057_4_fu_942_p3 <= 
        zext_ln1057_1_fu_929_p1 when (icmp_ln1057_2_reg_1677(0) = '1') else 
        add_ln573_reg_1664;
    select_ln1057_5_fu_880_p3 <= 
        icmp_ln1057_reg_1648 when (icmp_ln1057_2_fu_819_p2(0) = '1') else 
        icmp_ln1057_3_fu_875_p2;
    select_ln1057_6_fu_917_p3 <= 
        i_4_fu_907_p2 when (select_ln1057_5_reg_1698(0) = '1') else 
        select_ln1057_fu_901_p3;
    select_ln1057_7_fu_1151_p3 <= 
        ap_const_lv32_1 when (icmp_ln1057_2_reg_1677(0) = '1') else 
        add_ln1057_fu_1145_p2;
    select_ln1057_fu_901_p2 <= i_fu_192;
    select_ln1057_fu_901_p3 <= 
        ap_const_lv16_0 when (icmp_ln1057_2_reg_1677(0) = '1') else 
        select_ln1057_fu_901_p2;
    select_ln45_1_fu_948_p3 <= 
        grp_fu_1363_p2 when (select_ln1057_5_reg_1698(0) = '1') else 
        select_ln1057_3_fu_936_p3;
    select_ln45_2_fu_973_p3 <= 
        add_ln573_2_fu_967_p2 when (select_ln1057_5_reg_1698(0) = '1') else 
        select_ln1057_4_fu_942_p3;
    select_ln45_fu_893_p3 <= 
        ap_const_lv16_0 when (or_ln45_fu_887_p2(0) = '1') else 
        lhs_V_1_fu_188;
    select_ln49_1_fu_1041_p3 <= 
        h_V_mid1_fu_1036_p2 when (icmp_ln1057_6_fu_1013_p2(0) = '1') else 
        h_V_fu_988_p2;
    select_ln49_2_fu_1057_p3 <= 
        add_ln50_fu_1026_p2 when (icmp_ln1057_6_fu_1013_p2(0) = '1') else 
        ii_reg_335;
    select_ln49_3_fu_1079_p3 <= 
        icmp_ln56_1_fu_1074_p2 when (icmp_ln1057_6_fu_1013_p2(0) = '1') else 
        icmp_ln56_fu_997_p2;
    select_ln49_fu_1018_p3 <= 
        ap_const_lv8_0 when (icmp_ln1057_6_fu_1013_p2(0) = '1') else 
        jj_1_reg_346;
    select_ln76_fu_1331_p3 <= 
        ap_const_lv32_0 when (and_ln73_fu_1326_p2(0) = '1') else 
        bitcast_ln73_fu_1285_p1;
        sext_ln1057_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln1057_2_fu_857_p3),64));

        sext_ln225_1_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w_V_fu_1091_p2),17));

        sext_ln225_3_fu_1201_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_1194_p3),64));

        sext_ln76_fu_1275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_1265_p4),64));

    shl_ln1543_1_fu_590_p3 <= (pad_y_V_1_fu_536_p3 & ap_const_lv1_0);
    shl_ln1_fu_1249_p3 <= (grp_fu_1381_p3 & ap_const_lv2_0);
    shl_ln2_fu_1194_p3 <= (grp_fu_1393_p3 & ap_const_lv2_0);
    shl_ln_fu_544_p3 <= (pad_x_V_1_fu_528_p3 & ap_const_lv1_0);
    sub_ln1543_1_fu_446_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln1543_1_fu_436_p4));
    sub_ln1543_2_fu_488_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(zext_ln1543_1_fu_470_p1));
    sub_ln1543_3_fu_504_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(trunc_ln1543_4_fu_494_p4));
    sub_ln1543_fu_430_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) - unsigned(zext_ln1543_fu_412_p1));
    sub_ln45_fu_954_p2 <= std_logic_vector(unsigned(select_ln45_1_fu_948_p3) - unsigned(conv_i9_i381_reg_1580));
    tmp9_fu_1235_p0 <= tmp9_fu_1235_p00(32 - 1 downto 0);
    tmp9_fu_1235_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1226_p2),48));
    tmp9_fu_1235_p1 <= CHout_cast_reg_1612(16 - 1 downto 0);
    tmp_1_fu_1288_p4 <= bitcast_ln73_fu_1285_p1(30 downto 23);
    tmp_3_fu_764_p3 <= (cout_fu_200 & ap_const_lv2_0);
    tmp_4_fu_422_p3 <= add_ln1543_fu_416_p2(8 downto 8);
    tmp_5_fu_480_p3 <= add_ln1543_1_fu_474_p2(8 downto 8);
    tmp_6_fu_1106_p3 <= or_ln56_fu_1100_p2(15 downto 15);
    tmp_fu_1226_p2 <= std_logic_vector(unsigned(mul_ln49_3_reg_1812) + unsigned(zext_ln49_fu_1213_p1));
    trunc_ln1543_1_fu_436_p4 <= sub_ln1543_fu_430_p2(8 downto 1);
    trunc_ln1543_2_fu_452_p4 <= add_ln1543_fu_416_p2(8 downto 1);
    trunc_ln1543_4_fu_494_p4 <= sub_ln1543_2_fu_488_p2(8 downto 1);
    trunc_ln1543_5_fu_510_p4 <= add_ln1543_1_fu_474_p2(8 downto 1);
    trunc_ln223_1_fu_671_p1 <= grp_fu_630_p2(16 - 1 downto 0);
    trunc_ln223_fu_661_p1 <= grp_fu_584_p2(16 - 1 downto 0);
    trunc_ln3_fu_1265_p4 <= add_ln76_fu_1260_p2(63 downto 2);
    trunc_ln73_fu_1298_p1 <= bitcast_ln73_fu_1285_p1(23 - 1 downto 0);
    w_V_fu_1091_p2 <= std_logic_vector(signed(sub_ln1525_reg_1727) + signed(zext_ln225_fu_1087_p1));
    xor_ln56_fu_1114_p2 <= (tmp_6_fu_1106_p3 xor ap_const_lv1_1);
    zext_ln1057_1_fu_929_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln43_reg_1686),48));
    zext_ln1057_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cout_fu_200),48));
    zext_ln1525_1_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pad_x_V_1_reg_1515),16));
    zext_ln1525_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sx_read_reg_1473),16));
    zext_ln1543_10_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky),18));
    zext_ln1543_1_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Ky),9));
    zext_ln1543_2_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_544_p3),17));
    zext_ln1543_3_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Win),17));
    zext_ln1543_4_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1543_2_fu_560_p2),18));
    zext_ln1543_5_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx),18));
    zext_ln1543_7_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1543_1_fu_590_p3),17));
    zext_ln1543_8_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hin),17));
    zext_ln1543_9_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1543_3_fu_606_p2),18));
    zext_ln1543_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Kx),9));
    zext_ln225_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_fu_1018_p3),16));
    zext_ln49_fu_1213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1401_p2),32));
    zext_ln76_1_fu_1256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_1249_p3),64));
end behav;
